[https://start.spring.io/]
Project : Gradle - Groovy
Language : Java
Spring Boot : 3.3.4
Project Metadata - Group : com.bgSPMall
Project Metadata - Artifact : shop
Project Metadata - Name : shop
Project Metadata - Description : Demo project for Spring Boot
Project Metadata - Package name : com.bgSPMall.shop
Project Metadata - Packaging : Jar
Project Metadata - Java : 17
Dependencies : Spring Web, Spring Boot DevTools
intellij sdk : Oracle Open JDK-23

[class는 변수,함수를 보관하는 보관함]
class Test {

	String name = "kang";

	void hello(){
		System.out.println("안녕");
	}

}

[출력 단축키 sout]
sout = System.out.println();

[class 안에는 constructor (생성자)를 만들 수 있음]
class Friend {

	String name;
	int age;

	Friend(String name, int age){ // <- 이게 생성자
		this.name = name;
		this.age = age;
	}
}

[BasicController.java]
1. Class 파일을 src>main>java>combgSPMall.shop 안에 만듦
2. @Controller < class 위에 붙이면 서버기능
3. @GetMapping("/") (메인페이지로 접속하면 이라는 뜻 ex: localhost:8080)
4. //@ResponseBody <- return에 문자 그대로를 보내라는 뜻이라서 주석처리해야 return "index.html"; 했을 때 해당 file을 보내줌

// how to route
@GetMapping("/")
@ResponseBody
public String hello() {
    return "Hello World";
}

[HTML 파일은 resources - static 폴더에 생성]
index.html
! + [tab key] -> html 템플릿 자동완성

[Template Engine : Thymeleaf]
build.gradle = 설치된 라이브러리 관리하는 파일
implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
Load Gradle 버튼 click

[.html 파일에 서버데이터 넣으려면]
1. html파일을 templates 폴더에 넣어야함
2. model.addAttribute(작명,데이터)
@GetMapping("/list")
    public String list(Model model) {   // Model model 파라미터 추가
        // Model.addAttribute() 사용
        model.addAttribute("name", "홍길동2"); // 그러면 list.html에서 <h4 th:text="${name}">Pants</h4> 이런식으로 사용 가능
        return "list.html";
    }

[DB호스팅은 supabase 사용]
[DB Tool은 DBeaver 사용]
[DB는 PostgreSQL 사용]

[build.gradle에 아래 2줄 추가]
runtimeOnly 'org.postgresql:postgresql' // postgresql 접속 도와주는 라이브러리 (runtimeOnly라고 적으면 코드를 컴파일할 때는 필요없는 라이브러리니까 컴파일 할 땐 쓰지말라는 뜻)
// 반대로 compileOnly 라고 적으면 컴파일할 때만 쓰라는 뜻(둘다 용량 절약 용도)
implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // (Hibernate)ORM 라이브러리(Java코드로 데이터 입출력 가능)
jpa : java의 ORM 표준문법
hibernate : jpa의 구현체(JPA 쓰기좋게 구현한 것)

[application.properties 설정]
spring.datasource.url=jdbc:postgresql://서버주소/db명
spring.datasource.username=supabase에서 준 user
spring.datasource.password=supabase에서 설정한 password
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.properties.hibernate.show_sql=true // JPA 문법 사용시 SQL을 따로 출력해줄지 에 대한 여부
spring.jpa.hibernate.ddl-auto=update // 테이블 생성을 자동으로 할지에 대한 여부 (update = 변경사항만 반영 / none = 모든 변경사항 반영 X (배포시사용))

[java>com.bgSPMall.shop>item.java file create]
ORM에서는 class위에 @Entity를 붙이면 class명으로 테이블을 생성해줌(JPA 라이브러리)

id컬럼에는 @Id 필수 (index)
auto increament 기능 : @GeneratedValue(strategy = GenerationType.IdenTITY)

[컬럼에는 어노테이션 @Column을 붙여서 제약조건 설정 가능]
@Column(nullable = false,  unique = true, length=1000)

[Lombok 설치 (코드 자동생성 라이브러리)]
compileOnly 'org.projectlombok:lombok'
annotationProcessor 'org.projectlombok:lombok'

file - settings - annotationProcess check

[JPA로 데이터 입출력]
1. repository 만들기 (ItemRepository.java) <- interface
2. class에 repository 등록
3. repository.입출력문법() 사용

[main.css file은 resources > static 폴더안에 create]
static폴더의 css파일 사용법 <head>태그 안에
<link href="/main.css" rel="stylesheet">

[html 반복문 th:each="변수명 : ${dataset}"]
<div class="card" th:each="i : ${items}">
    <img src="https://placehold.co/300">
    <div>
        <h4 th:text="${i.title}">상품명</h4>
        <p th:text="${i.price}">가격</p>
    </div>
</div>

[toString]
class 위에 @ToString 작성 // toString 함수 사용가능(lombok 라이브러리)

[access modifiers]
public : 다른 class에서도 사용 가능
private : 다른 class에서 사용 불가능
protected (=package-private) : 같은 폴더에서 사용 가능 (상속한 클래스는 사용가능)
static : 객체를 만들지 않아도 사용가능

[form data 전송시 Map 사용하면 모든 컬럼을 한번에 보낼 수 있음]
@PostMapping("/addItem")
    public String addItem(@RequestParam Map formData) {
        System.out.println(formData);

        return "redirect:/list"; // redirect
    }

Map 자료형 : {} 중괄호사용
HashMap<String, Object> test = new HashMap<>(); // HashMap<key,value> ddd = new ~
test.put("name","kang");    // key, value 사용
test.put("age",20);

[th:fragment] thymeleaf 문법 (nav.html)
<div th:replace="~{nav.html::navbar}"></div> (write.html)
div box를 nav.html에 있는 navbar 이름의 div로 덮어써라

html로 변수나 데이터를 전송해줄 수도 있음
th:replace="nav.html :: navbar('데이터1', '데이터2')"

String detail(@PathVariable Integer id) {   // 유저가 URL파라미터에 입력한 값

[에러내역 기록하려면  logging 라이브러리]
개발할 땐 그냥 System.out.println(e.getMessage()); 써서 콘솔에 출력

[error]
throw new Exception("에러발생시키기");
위 문법은 try catch 안에서 사용 or throw Exception 사용

Client Error : 4xx
Server Error : 5xx
정상 : 200

[REST API 오류잡을때]
return ResponseEntity.status(HttpStatus.NOT_FOUND).body("400Error남");

REST API일 경우에는 try/catch / @ExceptionHandler
REST API는 return "detail.html" 이런식으로 html파일을 보내주지 않고 데이터만 보내주기 때문에

[데이터나 html을 보내는 역할 == Controller]
[검사하거나 DB입출력 하는 것들 == 비즈니스로직]
[비즈니스 로직 담는 클래스 == Service]

[Dependency Injection] : new 키워드로 Object 만드는게 아니라 Autowired 사용하는것
쓰는이유 : Object 여러개 안 뽑아도 됨(효율) ,class간 coupling 줄임

Spring이 Object를 IoC Container에 넣어둠 그 Object들을 Bean이라고 부름


[price처럼 숫자만 입력되야할 때 inputbox에 oninput속성 추가]
oninput="this.value = this.value.replace(/[^0-9]/g, '')"

[input에는 th:value]

[JPA수정 : .save 사용 예외]
.save는 행추가인데 id값이 같으면 그 행을 수정함

[AJAX : 새로고침없이 서버로 요청하는 javascript코드]
<script> // html파일 로드시 1회 실행 (one time run when this html file load)
    // fetch('/url') // javascript 기본함수 url로 ajax를 이용해서 get요청을함

        document.querySelectorAll('.button')[1].addEventListener('click', function(){
            fetch('/test1', {
                method : 'POST', // GET,POST,PUT,DELETE
                headers : {'Content-Type' : 'application/json'},    // json data를 보낼것
                body : JSON.stringify({name : 'kim'}) // array보낼땐 stringify 사용
            })
        })
</script>

[query string]
document.querySelectorAll('.button1')[0].addEventListener('click', function() {
        fetch('/test1?name=kim&key=value')
    })


[ajax사용시 return 값에 redirect 불가능]
.then() : AJAX요청 완료시 코드 실행

<span th:onclick="fetch('/deleteItem?id=[[${i.id}]]', {method : 'DELETE'})
                           .then(r => r.text()) <!-- r.text : 서버에서 return 값이 String일 때, r.json : 서버에서 return값이 map or array일 때 -->
                           .then((a) => {        <!-- callback함수 / a는 브라우저에서 보낸 값? -->
                              console.log(a)
                              location.reload(); <!-- 브라우저 새로고침 -->
                           })
                        ">❌</span>

[URL parameter 쓰면 서버로 데이터전송 가능]
@PathVariable String abc

[session 방식 / token 방식]
session방식 = db사용
token = db사용x

[OAuth]
social login : A사이트에서 쓰던 정보를 B사이트에서도 쓰는

[Spring Security 사용해서 회원기능 구현]
implementation 'org.springframework.boot:spring-boot-starter-security'
implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'

[SecurityConfig.java]
FilterChain : 유저의 요청과 서버의 응답 사이에 자동으로 실행할 코드를 쓰는곳
authorize.requestMatchers("/**").permitAll() // 특정페이지 로그인 검사 할지 결정
.permitAll() : 항상 허용

[hashing]
salt

[Bean]
BCryptPasswordEncoder 같은 유저가 만든 라이브러리를 직접 수정하는건 비추,
SecurityCofig.java 파일에서 한 것 처럼 Bean으로 만들어서 사용가능 (Dependency Injection)
(class명 위에 @Configuration 붙여야함)
@Bean
PasswordEncoder fnName(){
    return new BCryptPasswordEncoder();
}
이렇게 작성 했으면 Controller에서 등록 후 사용가능
private final PasswordEncoder passwordEncoder;

SpringSecurity 사용시 Login화면 만들 때
input name 정해진걸로 맞춰야함 (username, password) + form action="/login"

interface : class의 가이드라인


[Derived query methods] (MemberRepository.java)
- and, or 조건
- 특정문자 포함되었는지 검색
- 특정 숫자 이상/이하인 것 검색
- 정렬 등
interface ~Repository 함수 안에
findBy컬럼명(파라미터); <- 컬럼명에 파라미터가 들어있는 행을 찾아오는 함수를 만들어줌
ex) Optional<Member> findByUsername(String username);
+ ) findAllBy~ : 파라미터가 들어있는 모든행 찾음 (Optional이 아니라 List에 담기)


[JPA는 기본적으로 camelCase로 작성된 Java 필드명을 데이터베이스의 snake_case로 자동변환시켜버림...]
그래서 Entity에 userId 라고 작성했는데 DB에는 자꾸 user_id로 만들어진것...

[권한 : MyUserDetailsService.java, MemberController.java]

[sec:authentication] - mypage.html
<div sec:authentication="principal"></div> <!-- 유저정보 -->
<div sec:authentication="principal.username"></div> <!-- Object자료형이라 이렇게 쓸 수 있음 -->
<div sec:authorize="hasAuthority('NormalUser')">
  <h4>일반유저만 보임</h4>
</div>
<div sec:authorize="isAuthenticated()">login user</div> // 로그인한 사람한테만 보임
<div sec:authorize="isAnonymous()">logout user</div> // 로그아웃한 사람한테만 보임

API마다 로그인검사하는 어노테이션
@PreAuthorize("isAuthenticated()") : 소괄호 안에 있는 함수가 참인 경우에만 아래의 API를 실행해줌
- isAuthenticated()
- isAnonymous()
- hasAuthority('')

userDetails는 SpringSecurity에 기본 내재 되어있는 듯...
수정해서 쓰려면 클래스 하나 만들어서 implements하면 될 듯?

[spring-session-jdbc]

[pagination]

[s3 - Presigned URL]
유저가 이미지 올릴 때 서버에는 허락만 받고 유저가 바로 S3에 이미지업로드 하는 방식

1.글 쓸때 이미지 선택하면 미리보기 보여주기
2.선택하면 s3에 올리는게 아니라 저장하면 올리기
3.저장할때 item table에 박기
4.list나 상세페이지에서 이미지 보여줄때 item 테이블에서 이미지경로로 꺼내서 보여주기

[서버띄우기]
프로젝트 폴더에서 터미널 열고
./gradlew bootJar 입력하면 .jar 파일이 생성됨
build>libs>생성된jar파일.jar
터미널에서 해당 경로로 접근 후
java -jar 생성된jar파일.jar 입력하면 서버띄우기 끝

[댓글]
클라이언트 : 댓글작성폼 전송시 서버로 전달
서버 : Comment테이블에 댓글 저장
상세페이지에서 댓글 뽑아서 보여주기

[docker]
1. ./gradlew bootJar 로 jar파일생성
2.루트경로에 Dockerfile 생성
FROM openjdk:17 // 자바버전
ARG JAR_FILE=build/libs/shop-0.0.1-SNAPSHOT.jar // ARG : 변수선언
COPY ${JAR_FILE} app.jar
ENTRYPOINT ["java","-jar","/app.jar"]
3. docker buildx build -t 태그(springapp:latest)
4. docker save -o springapp.tar springapp:latest
5. casaos를 이용해 ubuntu서버에 올려서 파일 경로 접근
6. docker load -i springapp.tar
7. docker images 이미지확인
8. docker run -d -p 5000:5000 springapp:latest

[하다가 알게된 것]
302 리다이렉션 처리:
서버에서 302 상태 코드를 반환하면, 브라우저가 자동으로 리다이렉션을 처리하여 .then 블록이 실행되지 않을 수 있다

[index처리]
@Table  어노테이션

(쿼리작성시 EXPLAIN 사용하면 index 쓰는지 안쓰는지 확인가능)
ex : explain select * from item where title like 'black%';

%기호가 앞에 쓰이면 index 동작안함
-> full text index 사용(영어는 그냥 사용, 한국어는 n-gram parser 이용)
n-gram parser : 문자를 n자씩 추출해서 full text index 생성

[postgres는 fulltextindex 쓸 때 pg_bigm 사용]
근데 설치가 잘 안돼서 직접 github에서 zip파일 받아서 폴더 경로에 넣음
(https://khjeong0423.tistory.com/18) 이사람 블로그 참고함

[ManyToOne] 쓰는것 보단 그냥 직접 짜는게 나은듯
join 사용시엔 JPQL
JPQL : SQL 대용 문법

manyToOne 쓰면 모든컬럼(비밀번호)을 다 가져와서 보안상 좋지않음

1.마이페이지에 주문내역
2.admin이면 모든 주문내역 보이게

[JWT]
implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
implementation 'io.jsonwebtoken:jjwt-gson:0.12.5'
implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
