[https://start.spring.io/]
Project : Gradle - Groovy
Language : Java
Spring Boot : 3.3.4
Project Metadata - Group : com.bgSPMall
Project Metadata - Artifact : shop
Project Metadata - Name : shop
Project Metadata - Description : Demo project for Spring Boot
Project Metadata - Package name : com.bgSPMall.shop
Project Metadata - Packaging : Jar
Project Metadata - Java : 17
Dependencies : Spring Web, Spring Boot DevTools
intellij sdk : Oracle Open JDK-23

[class는 변수,함수를 보관하는 보관함]
class Test {

	String name = "kang";

	void hello(){
		System.out.println("안녕");
	}

}

[출력 단축키 sout]
sout = System.out.println();

[class 안에는 constructor (생성자)를 만들 수 있음]
class Friend {

	String name;
	int age;

	Friend(String name, int age){ // <- 이게 생성자
		this.name = name;
		this.age = age;
	}
}

[BasicController.java]
1. Class 파일을 src>main>java>combgSPMall.shop 안에 만듦
2. @Controller < class 위에 붙이면 서버기능
3. @GetMapping("/") (메인페이지로 접속하면 이라는 뜻 ex: localhost:8080)
4. //@ResponseBody <- return에 문자 그대로를 보내라는 뜻이라서 주석처리해야 return "index.html"; 했을 때 해당 file을 보내줌

// how to route
@GetMapping("/")
@ResponseBody
public String hello() {
    return "Hello World";
}

[HTML 파일은 resources - static 폴더에 생성]
index.html
! + [tab key] -> html 템플릿 자동완성

[Template Engine : Thymeleaf]
build.gradle = 설치된 라이브러리 관리하는 파일
implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
Load Gradle 버튼 click

[.html 파일에 서버데이터 넣으려면]
1. html파일을 templates 폴더에 넣어야함
2. model.addAttribute(작명,데이터)
@GetMapping("/list")
    public String list(Model model) {   // Model model 파라미터 추가
        // Model.addAttribute() 사용
        model.addAttribute("name", "홍길동2"); // 그러면 list.html에서 <h4 th:text="${name}">Pants</h4> 이런식으로 사용 가능
        return "list.html";
    }

[DB호스팅은 supabase 사용]
[DB Tool은 DBeaver 사용]
[DB는 PostgreSQL 사용]

[build.gradle에 아래 2줄 추가]
runtimeOnly 'org.postgresql:postgresql' // postgresql 접속 도와주는 라이브러리 (runtimeOnly라고 적으면 코드를 컴파일할 때는 필요없는 라이브러리니까 컴파일 할 땐 쓰지말라는 뜻)
// 반대로 compileOnly 라고 적으면 컴파일할 때만 쓰라는 뜻(둘다 용량 절약 용도)
implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // (Hibernate)ORM 라이브러리(Java코드로 데이터 입출력 가능)
jpa : java의 ORM 표준문법
hibernate : jpa의 구현체(JPA 쓰기좋게 구현한 것)

[application.properties 설정]
spring.datasource.url=jdbc:postgresql://서버주소/db명
spring.datasource.username=supabase에서 준 user
spring.datasource.password=supabase에서 설정한 password
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.properties.hibernate.show_sql=true // JPA 문법 사용시 SQL을 따로 출력해줄지 에 대한 여부
spring.jpa.hibernate.ddl-auto=update // 테이블 생성을 자동으로 할지에 대한 여부 (update = 변경사항만 반영 / none = 모든 변경사항 반영 X (배포시사용))

[java>com.bgSPMall.shop>item.java file create]
ORM에서는 class위에 @Entity를 붙이면 class명으로 테이블을 생성해줌(JPA 라이브러리)

id컬럼에는 @Id 필수 (index)
auto increament 기능 : @GeneratedValue(strategy = GenerationType.IdenTITY)

[컬럼에는 어노테이션 @Column을 붙여서 제약조건 설정 가능]
@Column(nullable = false,  unique = true, length=1000)

[Lombok 설치 (코드 자동생성 라이브러리)]
compileOnly 'org.projectlombok:lombok'
annotationProcessor 'org.projectlombok:lombok'

file - settings - annotationProcess check

[JPA로 데이터 입출력]
1. repository 만들기 (ItemRepository.java) <- interface
2. class에 repository 등록
3. repository.입출력문법() 사용

[main.css file은 resources > static 폴더안에 create]
static폴더의 css파일 사용법 <head>태그 안에
<link href="/main.css" rel="stylesheet">

[html 반복문 th:each="변수명 : ${dataset}"]
<div class="card" th:each="i : ${items}">
    <img src="https://placehold.co/300">
    <div>
        <h4 th:text="${i.title}">상품명</h4>
        <p th:text="${i.price}">가격</p>
    </div>
</div>

[toString]
class 위에 @ToString 작성 // toString 함수 사용가능(lombok 라이브러리)

[access modifiers]
public : 다른 class에서도 사용 가능
private : 다른 class에서 사용 불가능
protected (=package-private) : 같은 폴더에서 사용 가능 (상속한 클래스는 사용가능)
static : 객체를 만들지 않아도 사용가능

[form data 전송시 Map 사용하면 모든 컬럼을 한번에 보낼 수 있음]
@PostMapping("/addItem")
    public String addItem(@RequestParam Map formData) {
        System.out.println(formData);

        return "redirect:/list"; // redirect
    }

Map 자료형 : {} 중괄호사용
HashMap<String, Object> test = new HashMap<>(); // HashMap<key,value> ddd = new ~
test.put("name","kang");    // key, value 사용
test.put("age",20);

[th:fragment] thymeleaf 문법 (nav.html)
<div th:replace="~{nav.html::navbar}"></div> (write.html)
div box를 nav.html에 있는 navbar 이름의 div로 덮어써라

html로 변수나 데이터를 전송해줄 수도 있음
th:replace="nav.html :: navbar('데이터1', '데이터2')"

String detail(@PathVariable Integer id) {   // 유저가 URL파라미터에 입력한 값

