[https://start.spring.io/]
Project : Gradle - Groovy
Language : Java
Spring Boot : 3.3.4
Project Metadata - Group : com.bgSPMall
Project Metadata - Artifact : shop
Project Metadata - Name : shop
Project Metadata - Description : Demo project for Spring Boot
Project Metadata - Package name : com.bgSPMall.shop
Project Metadata - Packaging : Jar
Project Metadata - Java : 17
Dependencies : Spring Web, Spring Boot DevTools
intellij sdk : Oracle Open JDK-23

[class는 변수,함수를 보관하는 보관함]
class Test {

	String name = "kang";

	void hello(){
		System.out.println("안녕");
	}

}

[출력 단축키 sout]
sout = System.out.println();

[class 안에는 constructor (생성자)를 만들 수 있음]
class Friend {

	String name;
	int age;

	Friend(String name, int age){ <- 이게 생성자
		this.name = name;
		this.age = age;
	}
}

[BasicController.java]
1. Class 파일을 src>main>java>combgSPMall.shop 안에 만듦
2. @Controller < class 위에 붙이면 서버기능
3. @GetMapping("/") (메인페이지로 접속하면 이라는 뜻 ex: localhost:8080)
4. //@ResponseBody <- return에 문자 그대로를 보내라는 뜻이라서 주석처리해야 return "index.html"; 했을 때 해당 file을 보내줌

// how to route
@GetMapping("/")
@ResponseBody
public String hello() {
    return "Hello World";
}

[HTML 파일은 resources - static 폴더에 생성]
index.html
! + [tab key] -> html 템플릿 자동완성

[Template Engine : Thymeleaf]
build.gradle = 설치된 라이브러리 관리하는 파일
implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
Load Gradle 버튼 click

[.html 파일에 서버데이터 넣으려면]
1. html파일을 templates 폴더에 넣어야함
2. model.addAttribute(작명,데이터)
@GetMapping("/list")
    public String list(Model model) {   // Model model 파라미터 추가
        // Model.addAttribute() 사용
        model.addAttribute("name", "홍길동2"); // 그러면 list.html에서 <h4 th:text="${name}">Pants</h4> 이런식으로 사용 가능
        return "list.html";
    }

